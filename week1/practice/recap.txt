-----------------------------------
Week 1
-----------------------------------

1. Напишете програма, която приема цяло число N за вход и връща динамично заделен масив с първите N числа на Фибоначи.

____ fibArray(____ N);

Пр.: fibArray(6) -> {0, 1, 1, 2, 3, 5}

2. Напишете функция, която взема целочислен масив, броя на заетите елементи в него и наличното му пространство (капацитет) и имплементирайте функцията push_back.  
Функцията трябва да вземе тези параметри, да добави новия елемент в масива и да промени стойностите на размера и капацитета, ако е необходимо.

____ push_back(____ array, ____ size, ____ capacity, int newVal);

Пр.:
size = 2; // броя на заетите клетки в масива
cap = 5; // общия размер на масива
arr = {1, 2, _, _, _};
push_back(arr, size, cap, 3);
size -> 3 // увеличаваме броя на заетите клетки
cap -> 5 // капацитета се запазва
arr -> {1, 2, 3, _, _}
Ако капацитета и размера на масива са равни заделете нов масив с двойно повече капацитет. Погрижете се за заделената памет.


3. Напишете програма, която приема два масива от цели числа и техните размери като вход и връща нов масив, който съдържа сумата от съответните елементи на двата масива.  Използвайте указатели и динамично заделена памет, за да създадете новия масив.  Ако размерите на масивите са различни, използвайте по-големия като размер на резултатния масив.

____ sumUp(____ array1, ____ size1, ____ array2, ____ size2);

Пр.:
sumUp({1, 2, 3, 4}, 4, {1, 1}, 2) -> {2, 3, 3, 4}


4. "Подрежете" (trim) думите от масив от двете страни - даден е масив от думи, които може да съдържат N на брой ' ', табулация ('/t') или нов ред ('/n') от двете си страни. Премахнете ги и изведете масива на стандартния изход.

5. Символът '?'  е често срещан заместител(placeholder).  Напишете функция, която приема символен низ(масив от символи) и масив от думи и ги замества '?'  с тези думи.

Ex.:
query = "SELECT ?, ?, ? FROM ? WHERE ?=?;";
values[6] = {"name", "age", "gender", "person", "ID", "3"};
replacePlaceholders(query, values) -> SELECT name, age, gender FROM person WHERE ID=3;


6. Създайте програма, която приема 2 или повече аргумента от командния ред.  Първият аргумент е само един символ.  Програмата трябва да отпечата всеки аргумент, който съдържа символа.
Пр.:
> find.exe e spike pole roof stairs
> spike
> pole

7. Магически квадрати
Нека е дадена квадратна таблица съдържаща числа. Ще казваме, че тя е магически квадрат, ако сбора на числата във всички нейни редове, всички колони и по двата диагонала, е един и същ. Например дадената по-долу таблица е магически квадрат:
4   14  15   1
9    7   6  12 
5   11  10   8
16   2   3  13

Напишете програма, която въвежда от потребителя число N -- размерът на таблицата, следвано от N цели числа -- нейните елементи. Считаме, че N ≤ 10. Елементите на таблицата се въвеждат ред по ред, започвайки от най-горния. Не е задължително всички елементи в таблицата да са различни, например може всички числа в нея да са равни на 1. Програмата трябва да изведе на екрана текст “True”, ако таблицата е магически квадрат и “False” в противен случай.
По-долу е дадена примерна таблица с размери 3x3 и как би могла да работи програмата за нея:
4 9 2
3 5 7
8 1 6


8. Всички сме запознати с играта бесеница. Защо не я имплементираме?
Ето правилата:
Нека кажем, че играта е вашата програма, а играчът е потребителят, който я изпълнява.  Това, което искаме, е играта да има hard coded база от думи и една от тях да бъде избрана на случаен принцип.
Нека играчът има 5 възможности за грешка, докато се опита да отгатне думата.  Играта трябва интерактивно да покаже дали въведената буква е правилна или не.  Ако играчът не успее да познае думата с 5 грешки, играта казва, че играта свърши и приключва изпълнението си.

Примерно изпълнение на програмата:

Guess the word (max 5 mistakes):
[0/5] _ _ _ _ _ _ _ History:
Choose a letter: a
No such letter!

[1/5] _ _ _ _ _ _ _ History: a
Choose a letter: e
OK

[1/5] _ e _ _ _ _ e History: a e
Choose a letter: i
OK

[1/5] _ e _ i _ _ e History: a e i
Choose a letter: v
OK

[1/5] v e _ i _ _ e History: a e i v
Choose a letter: b
No such letter!

[2/5] v e _ i _ _ e History: a e i v b
Choose a letter: z
No such letter!

[3/5] v e _ i _ _ e History: a e i v b z
Choose a letter: d
No such letter!

[4/5] v e _ i _ _ e History: a e i v b d
Choose a letter: r
No such letter!

You lose!
The word was: vehicle
Game Over!

Bonus: след като напишете програмата, опитайте да я разширите така, че да играе сама срещу себе си. Вие вече ще имате разписна логиката,
която позволява да се указват букви, да се проверява дали те се съдържат в думата и да се проверява дали играта е приключила и с какъв резултат. Разширете списъка с думи и напишете нови функции, които позволяват на програмата, след като вече има избрана
дума, да се опитва да познае коя от списъка е тя. Модифицирайте програмата така, че при стартирането ѝ, вместо да кара потребителя да въвежда букви, да показва как играе на всеки ход.